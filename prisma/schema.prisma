// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(uuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(uuid()) @map("_id")
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Checklist     Checklist[]
}

model Checklist {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  tasks     Task[]
  taskOrder String[]

  createdBy String
  user      User   @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model Task {
  id         String     @id @default(uuid()) @map("_id")
  title      String
  completed  Boolean
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  TaskList   Checklist? @relation(fields: [taskListId], references: [id])
  taskListId String?
}

model VerificationToken {
  id         String   @id @default(uuid()) @map("_id")
  identifier String   @unique
  token      String   @unique
  expires    DateTime
}
